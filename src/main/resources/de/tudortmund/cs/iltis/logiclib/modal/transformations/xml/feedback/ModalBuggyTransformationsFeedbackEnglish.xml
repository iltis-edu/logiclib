<?xml version="1.0" encoding="UTF-8" ?>
<transformationsWithFeedbackTexts language="en">
    <group id="BUGGY_IDEMPOTENCE_TO_TOP" name="Buggy idempotence to ⊤">
        <description type="default">
            Maybe you confused φ ∨ φ or φ ∧ φ with ⊤.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_FORMULA_TO_IMPLICATIONAL_TAUTOLOGY" name="Buggy implicational tautology">
        <description type="default">
            Notice, that φ is not equivalent to φ → φ or φ ↔ φ.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
    </group>

    <group id="BUGGY_REDUCE_CONJUNCTION_WITH_NEGATION" name="Buggy reduction of ¬ in ∧">
        <description type="default">
            Maybe you forgot, that φ ∧ ¬φ and ⊥ are equivalent.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REDUCE_CONJUNCTION_WITH_NEGATION_TO_BOTTOM" name="Buggy reduction of ¬ in ∧ with ⊥">
        <description type="default">
            Notice, that a formula of the form (φ ∨ ψ) ∧ (¬φ ∨ ¬ψ) can be satisfiable.
            It therefore is not equivalent to ⊥.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REDUCE_DISJUNCTION_WITH_NEGATION" name="Buggy reduction of ¬ in ∨">
        <description type="default">
            Maybe you forgot, that φ ∨ ¬φ and ⊤ are equivalent.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REDUCE_DISJUNCTION_WITH_NEGATION_TO_TOP" name="Buggy reduction of ¬ in ∨ with ⊤">
        <description type="default">
            Notice, that a formula of the form (φ ∧ ψ) ∨ (¬φ ∧ ¬ψ) may not be satisfied.
            It therefore is not equivalent to ⊤.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REDUCE_TOP_IN_DISJUNCTION" name="Buggy reduction of ⊤ in ∨">
        <description type="default">
            Maybe you forgot, that ⊤ dominates any disjunctions (∨), therefore φ ∨ ⊤ ≡ ⊤ holds.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REDUCE_TOP_IN_CONJUNCTION" name="Buggy reduction of ⊤ in ∧">
        <description type="default">
            Maybe you forgot, that ⊤ acts neutral in any conjunction (∧), therefore φ ∧ ⊤ ≡ φ holds.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REDUCE_BOTTOM_IN_DISJUNCTION" name="Buggy reduction of ⊥ in ∨">
        <description type="default">
            Maybe you forgot, that ⊥ acts neutral in any disjunction (∨), therefore φ ∨ ⊥ ≡ φ holds.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REDUCE_BOTTOM_IN_CONJUNCTION" name="Buggy reduction of ⊥ in ∧">
        <description type="default">
            Maybe you forgot, that ⊥ dominates any conjunction (∧), therefore φ ∧ ⊥ ≡ ⊥ holds.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <single id="BUGGY_SWAP_PREMISE_AND_CONCLUSION" name="Austausch von Prämisse und Konklusion">
        <description type="default">
            Maybe you confused the premise (φ) with the conclusion (ψ) in an implication φ → ψ.
        </description>
        <description type="long">
            The implication operator is used for translating conditional statements into propositional formulas.
            For example, a statement of the form "If φ then ψ" can be written as "φ → ψ". &lt;br&gt;&lt;b&gt;Caution&lt;/b&gt;: Statements of the form
            "φ only if ψ" are expressed by "φ → ψ" even though "if" occurs in front of ψ.&lt;br&gt;
            In an implication "φ → ψ" the first subformula (φ) is called the premise and the second subformula (ψ) is called the conclusion.
        </description>
        <description type="short">
            You might have switched the premise (φ) and conclusion (ψ) of some implication "φ → ψ" in your formula.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <group id="BUGGY_MOVE_PARENTHESIS_IN_MULTILAYERED_IMPLICATION" name="Buggy moving of () in →">
        <description type="default">
            Maybe you moved the parentheses in a multilayered implication (A → B) → C.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
    </group>

    <single id="BUGGY_REDUCE_IMPLICATIONAL_TAUTOLOGY" name="Buggy reduction of X → X">
        <description type="default">
            Maybe you did not replace an implication of the form φ → φ with ⊤.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_REDUCE_EQUIVALENT_TAUTOLOGY" name="Buggy reduction of X ↔ X">
        <description type="default">
           Maybe you did not replace an equivalence of the form φ ↔ φ with ⊤.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <group id="BUGGY_REMOVE_EQUIVALENCE" name="Buggy reduction of ↔">
        <description type="default">
            Maybe you wrongly replaced an equivalence φ ↔ ψ.
            Those can be replaced with (¬φ ∨ ψ) ∧ (φ ∨ ¬ψ) or (φ → ψ) ∧ (ψ → φ).
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REMOVE_IMPLICATION" name="Buggy reduction of →">
        <description type="default">
            Maybe you wrongly replaced an implication φ → ψ.
            Those can be replaced with ¬φ ∨ ψ.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REDUCE_TO_IMPLICATION" name="Buggy addition of →">
        <description type="default">
            Maybe you wrongly added an implication φ → ψ.
            Those are defined as ¬φ ∨ ψ.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_PUSH_NEGATION" name="Buggy moving ¬ into ()">
        <description type="default">
            Maybe you wrongly pushed a negation (¬) into some parentheses (φ ∨ ψ) or (φ ∧ ψ).
            Notice that all subformulae φ and ψ must be negated in the process, meaning a negation must be added in front of each of them.
            In addition, disjunctions (∨) and conjunctions (∧) must be switched.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_PULL_NEGATION" name="Buggy moving ¬ out of ()">
        <description type="default">
            Maybe you wrongly pulled a negation (¬) out of some parentheses (¬φ ∨ ¬ψ) or (¬φ ∧ ¬ψ).
            Notice that all subformulae φ and ψ must lose a negation in the process, meaning a negation must be removed from the front of each of them.
            In addition, disjunctions (∨) and conjunctions (∧) must be switched.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REMOVE_PARENTHESIS" name="Buggy reduction of ()">
        <description type="default">
            Maybe you forgot some parentheses (φ ∨ ψ) or (φ ∧ ψ).
            Notice that may only be removed if there is no leading negation (¬) directly in front of them.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_MOVE_PARENTHESIS_INSTEAD_OF_DISTRIBUTION" name="Buggy association instead of distribution">
        <description type="default">
            Maybe you moved some parentheses () instead of applying the law of distribution.
            Notice that parentheses may only be moved if they are defined over the same operator (∨) or (∧).
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_REDUCE_TO_SUBFORMULA" name="Buggy reduction to subformula">
        <description type="default">
            Maybe you forgot a subformula.
        </description>
        <description type="long">
            You have to consider all the information given in the scenario in order to model it correctly.
        </description>
        <description type="short">
            You might have forgotten a part.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_PUSH_DISTRIBUTION_TO_WRONG_TARGET" name="Buggy application of distribution">
        <description type="default">
            Maybe you applied the law of distribution wrongly.
            Notice that A ∨ (B ∧ C) ≡ (A ∨ B) ∧ (A ∨ C) and A ∧ (B ∨ C) ≡ (A ∧ B) ∨ (A ∧ C) hold.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_PULL_DISTRIBUTION_TO_WRONG_TARGET" name="Buggy reduction of distribution">
        <description type="default">
            Maybe you applied the law of distribution wrongly.
            Notice that (A ∨ B) ∧ (A ∨ C) ≡ A ∨ (B ∧ C) and (A ∧ B) ∨ (A ∧ C) ≡ A ∧ (B ∨ C) hold.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_MOVE_PARENTHESIS" name="Buggy associativity">
        <description type="default">
            Maybe you moved some parentheses and disobeyed the laws of DeMorgan in the process or
            misused the definitions of implications (→) or equivalence (↔).
        </description>
        <description type="long">
            The parentheses are used to connect parts of a formula.
            Moving parentheses inside a formula is only valid iff they are moved within a disjunction or conjunction.
            So "(A ∨ B) ∨ C" and "A ∨ (B ∨ C)" are equivalent formulas but "(A ∨ B) ∧ C" and "A ∨ (B ∧ C)" are not.
        </description>
        <description type="short">
            You might have misplaced some parentheses somewhere in your formula.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <single id="BUGGY_REMOVE_NEGATION" name="Buggy removing of ¬">
        <description type="default">
            Maybe you forgot a negation (¬).
        </description>
        <description type="long">
            The negation can be used to express the opposite of a proposition.
            The proposition "not φ" is expressed by the formula "¬φ".
        </description>
        <description type="short">
            You might have forgotten a negation somewhere.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_ADD_NEGATION" name="Buggy addition of ¬">
        <description type="default">
            Maybe you added a negation (¬).
        </description>
        <description type="long">
            The negation can be used to express the opposite of a proposition.
            The proposition "not φ" is expressed by the formula "¬φ".
        </description>
        <description type="short">
            You might have added too many negations.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <group id="BUGGY_REMOVE_SUBFORMULA" name="Buggy removing of a subformula">
        <description type="default">
            Maybe you forgot a subformula.
        </description>
        <description type="long">
            You have to consider all the information given in the scenario in order to model it correctly.
        </description>
        <description type="short">
            You might have forgotten a part.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
    </group>

    <group id="BUGGY_ADD_SUBFORMULA" name="Buggy addition of a subformula ">
        <description type="default">
            Maybe you added a new subformula.
        </description>
        <description type="long">
            You may only consider information given in the scenario in order to model it correctly.
        </description>
        <description type="short">
            You might have added too many subformulas to your formula.
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
    </group>

    <group id="BUGGY_SWAP_EQUIVALENCE_IMPLICATION" name="Buggy swap ↔ with →">
        <description type="default">
            Maybe you confused equivalence (↔) with implication (→).
        </description>
        <description type="long">
            The equivalence is used to connect two propositions whose truth values behave equally.
            I.e. both or neither of the propositions are true.
            The equivalence of φ and ψ is often phrased as "φ if and only if ψ" ("φ iff ψ") and is expressible as "φ ↔ ψ".&lt;br&gt;
            The implication operator is used for translating conditional statements into propositional formulas.
            For example, a statement of the form "If φ then ψ" can be written as "φ → ψ". &lt;br&gt;&lt;b&gt;Caution&lt;/b&gt;: Statements of the form
            "φ only if ψ" are expressed by "φ → ψ" even though "if" occurs in front of ψ.
        </description>
        <description type="insteadOf">
            You might have mixed up equivalence (↔) and implication (→).
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_SWAP_EQUIVALENCE_DISJUNCTION" name="Buggy swap ↔ with ∨">
        <description type="default">
            Maybe you confused equivalence (↔) with disjunction (∨).
        </description>
        <description type="short">
            The equivalence is used to connect two propositions whose truth values behave equally.
            I.e. both or neither of the propositions are true.
            The equivalence of φ and ψ is often phrased as "φ if and only if ψ" ("φ iff ψ") and is expressible as "φ ↔ ψ".&lt;br&gt;
            The disjunction is used to connect several propositions so that the resulting formula is true if at least one subformula is true.
            The proposition "φ or ψ" is expressed by the formula "φ ∨ ψ".
        </description>
        <description type="insteadOf">
            You might have mixed up equivalence (↔) and disjunction (∨).
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_SWAP_EQUIVALENCE_CONJUNCTION" name="Buggy swap ↔ with ∧">
        <description type="default">
            Maybe you confused equivalence (↔) with conjunction (∧).
        </description>
        <description type="long">
            The equivalence is used to connect two propositions whose truth values behave equally.
            I.e. both or neither of the propositions are true.
            The equivalence of φ and ψ is often phrased as "φ if and only if ψ" ("φ iff ψ") and is expressible as "φ ↔ ψ".&lt;br&gt;
            The conjunction is used to connect several propositions so that the resulting formula is true if all subformulas are true.
            The proposition "φ and ψ" is expressed by the formula "φ ∧ ψ".
        </description>
        <description type="insteadOf">
            You might have mixed up equivalence (↔) and conjunction (∧).
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_SWAP_IMPLICATION_DISJUNCTION" name="Buggy swap → with ∨">
        <description type="default">
            Maybe you confused implication (→) with disjunction (∨).
        </description>
        <description type="long">
            The implication operator is used for translating conditional statements into propositional formulas.
            For example, a statement of the form "If φ then ψ" can be written as "φ → ψ". &lt;br&gt;&lt;b&gt;Caution&lt;/b&gt;: Statements of the form
            "φ only if ψ" are expressed by "φ → ψ" even though "if" occurs in front of ψ.&lt;br&gt;
            The disjunction is used to connect several propositions so that the resulting formula is true if at least one subformula is true.
            The proposition "φ or ψ" is expressed by the formula "φ ∨ ψ".
        </description>
        <description type="insteadOf">
            You might have mixed up implication (→) and disjunction (∨).
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_SWAP_IMPLICATION_CONJUNCTION" name="Buggy swap → with ∧">
        <description type="default">
            Maybe you confused implication (→) with conjunction (∧).
        </description>
        <description type="long">
            The implication operator is used for translating conditional statements into propositional formulas.
            For example, a statement of the form "If φ then ψ" can be written as "φ → ψ". &lt;br&gt;&lt;b&gt;Caution&lt;/b&gt;: Statements of the form
            "φ only if ψ" are expressed by "φ → ψ" even though "if" occurs in front of ψ.&lt;br&gt;
            The conjunction is used to connect several propositions so that the resulting formula is true if all subformulas are true.
            The proposition "φ and ψ" is expressed by the formula "φ ∧ ψ".
        </description>
        <description type="insteadOf">
            You might have mixed up implication (→) and conjunction (∧).
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_SWAP_DISJUNCTION_CONJUNCTION" name="Buggy swap ∨ with ∧">
        <description type="default">
            Maybe you confused disjunction (∨) with conjunction (∧).
        </description>
        <description type="long">
            The disjunction is used to connect several propositions so that the resulting formula is true if at least one subformula is true.
            The proposition "φ or ψ" is expressed by the formula "φ ∨ ψ".&lt;br&gt;
            The conjunction is used to connect several propositions so that the resulting formula is true if all subformulas are true.
            The proposition "φ and ψ" is expressed by the formula "φ ∧ ψ".
        </description>
        <description type="insteadOf">
            You might have mixed up disjunction (∨) and conjunction (∧).
        </description>
        <transformationType>PL</transformationType>
        <transformationType>ML</transformationType>
        <transformationType>PL_CREATE_FORMULA</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>PL_MANUAL_TRANSFORMATION</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <single id="BUGGY_SWAP_BOX_FOR_DIAMOND" name="Buggy swap ☐ with ◇">
        <description type="default">
            Maybe you confused the box (☐) operator with the diamond (◇) operator.&lt;br&gt;
            Notice that the box-operator (☐φ) means that φ holds in all following worlds,
            while the diamond-operator (◇φ) means that φ holds in some following world.
        </description>
        <description type="long">
            The modal operators (☐,◇) are used to express conditions of successor worlds.&lt;br&gt;
            Notice that the box-operator (☐φ) means that φ holds in all following worlds,
            while the diamond-operator (◇φ) means that φ holds in some following world.
        </description>
        <description type="insteadOf">
            You might have mixed up the box (☐) operator and the diamond (◇) operator.
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_SWAP_DIAMOND_FOR_BOX" name="Buggy swap ◇ with ☐">
        <description type="default">
            Maybe you confused diamond (◇) operator with the box (☐) operator.&lt;br&gt;
            Notice that the box-operator (☐φ) means that φ holds in all following worlds,
            while the diamond-operator (◇φ) means that φ holds in some following world.
        </description>
        <description type="long">
            The modal operators (☐,◇) are used to express conditions of successor worlds.&lt;br&gt;
            Notice that the box-operator (☐φ) means that φ holds in all following worlds,
            while the diamond-operator (◇φ) means that φ holds in some following world.
        </description>
        <description type="insteadOf">
            You might have mixed up the diamond (◇) operator and the box (☐) operator.
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_ADD_BOX" name="Buggy addition of ☐">
        <description type="default">
            Maybe you added a box (☐).
        </description>
        <description type="long">
            The box is used to express that a formula holds in all successor worlds.
            The formula "☐φ" holds in a world if φ holds in all worlds that are reachable from this world in one step.
        </description>
        <description type="short">
            You might have added too many boxes (☐).
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_REMOVE_BOX" name="Buggy removing of ☐">
        <description type="default">
            Maybe you removed a box (☐).
        </description>
        <description type="long">
            The box is used to express that a formula holds in all successor worlds.
            The formula "☐φ" holds in a world if φ holds in all worlds that are reachable from this world in one step.
        </description>
        <description type="short">
            You might have forgotten a box (☐).
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_ADD_DIAMOND" name="Buggy addition of ◇">
        <description type="default">
            Maybe you added a diamond (◇).
        </description>
        <description type="long">
            The diamond is used to express that a formula holds in at least one successor world.
            The formula "◇φ" holds in a world if φ holds in at least one world that is reachable from this world in one step.
        </description>
        <description type="short">
            You might have added too many diamonds (◇).
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_REMOVE_DIAMOND" name="Buggy removing of ◇">
        <description type="default">
            Maybe you removed a diamond (◇).
        </description>
        <description type="long">
            The diamond is used to express that a formula holds in at least one successor world.
            The formula "◇φ" holds in a world if φ holds in at least one world that is reachable from this world in one step.
        </description>
        <description type="short">
            You might have forgotten a diamond (◇).
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_DISTRIBUTE_BOX" name="Buggy distribution of ☐">
        <description type="default">
            Maybe you applied the law of distribution wrongly to the box (☐) operator.
            The box-operator (☐) may only be distributed over a conjunction (∧), therefore ☐(φ ∧ ψ) ≡ ☐φ ∧ ☐ψ holds.
        </description>
        <description type="long">
            There is a semantic difference between the formulas ☐φ ∨ ☐ψ and ☐(φ ∨ ψ).&lt;br&gt;
            The formula ☐φ ∨ ☐ψ holds if and only if φ holds in all worlds or ψ holds in all worlds.
            The formula ☐(φ ∨ ψ) is not as restrictive as the former one, as it is already satisfied if for each successor world one of φ or ψ holds – but not necessarily the same formula φ resp. ψ in each world.
        </description>
        <description type="short">
            You might have mixed up ☐φ ∨ ☐ψ and ☐(φ ∨ ψ).
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_DISTRIBUTE_DIAMOND" name="Buggy distribution of ◇">
        <description type="default">
            Maybe you applied the law of distribution wrongly to the diamond (◇) operator.
            The diamond-operator (◇) may only be distributed over a disjunction (∨), therefore ◇(φ ∨ ψ) ≡ ◇φ ∨ ◇ψ holds.
        </description>
        <description type="long">
            There is a semantic difference between the two formulas ◇φ ∧ ◇ψ and ◇(φ ∧ ψ).&lt;br&gt;
            The formula ◇φ ∧ ◇ψ holds if and only if there is a successor world in which φ holds and there is a (possibly different) world in which ψ holds.
            The formula ◇(φ ∧ ψ) is more restrictive than the former one, as it is only satisfied if there is a successor world in which both, φ and ψ, hold.
        </description>
        <description type="short">
            You might have mixed up ◇φ ∧ ◇ψ and ◇(φ ∧ ψ).
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_UNDISTRIBUTE_BOX" name="Buggy removing of distributivity of ☐">
        <description type="default">
            Maybe you wrongly pulled the box (☐) operator out of a disjunction (∨).
            The box-operator (☐) may only be distributed over a conjunction (∧), therefore ☐φ ∧ ☐ψ ≡ ☐(φ ∧ ψ) holds.
        </description>
        <description type="long">
            There is a semantic difference between the formulas ☐φ ∨ ☐ψ and ☐(φ ∨ ψ).&lt;br&gt;
            The formula ☐φ ∨ ☐ψ holds if and only if φ holds in all worlds or ψ holds in all worlds.
            The formula ☐(φ ∨ ψ) is not as restrictive as the former one, as it is already satisfied if for each successor world one of φ or ψ holds – but not necessarily the same formula φ resp. ψ in each world.
        </description>
        <description type="short">
            You might have mixed up ☐φ ∨ ☐ψ and ☐(φ ∨ ψ).
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <single id="BUGGY_UNDISTRIBUTE_DIAMOND" name="Buggy removing of distributivity of ◇">
        <description type="default">
            Maybe you wrongly pulled the diamond (◇) operator out of a conjunction (∧).
            The diamond-operator (◇) may only be distributed over a disjunction (∨), therefore ◇φ ∨ ◇ψ ≡ ◇(φ ∨ ψ) holds.
        </description>
        <description type="long">
            There is a semantic difference between the two formulas ◇φ ∧ ◇ψ and ◇(φ ∧ ψ).&lt;br&gt;
            The formula ◇φ ∧ ◇ψ holds if and only if there is a successor world in which φ holds and there is a (possibly different) world in which ψ holds.
            The formula ◇(φ ∧ ψ) is more restrictive than the former one, as it is only satisfied if there is a successor world in which both, φ and ψ, hold.
        </description>
        <description type="short">
            You might have mixed up ◇φ ∧ ◇ψ and ◇(φ ∧ ψ).
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </single>

    <group id="BUGGY_PUSH_NEGATION_MODAL_OPERATORS" name="Buggy pushing negation of modal operators">
        <description type="default">
            Maybe you forgot to switch the modal operators (☐,◇) while pushing a negation (¬) over them.
            Notice that ¬☐φ ≡ ◇¬φ and ¬◇φ ≡ ☐¬φ hold.
        </description>
        <description type="long">
            When using a negation (¬) in combination with a modal operator (☐,◇), the negation can be moved over the modal operator freely.
            When doing so, this changes the modal operator from diamond (◇) to box (☐) and vice versa.
        </description>
        <description type="short">
            You might have switched up the position of a modal operator (☐,◇) and a negation (¬).
            Notice that ¬☐φ ≡ ◇¬φ and ¬◇φ ≡ ☐¬φ hold.
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>

    <group id="BUGGY_PULL_NEGATION_MODAL_OPERATORS" name="Buggy pulling negation of modal operators">
        <description type="default">
            Maybe you forgot to switch the modal operators (☐,◇) while pulling a negation (¬) over them.
            Notice that ¬☐φ ≡ ◇¬φ and ¬◇φ ≡ ☐¬φ hold.
        </description>
        <description type="long">
            When using a negation (¬) in combination with a modal operator (☐,◇), the negation can be moved over the modal operator freely.
            When doing so, this changes the modal operator from diamond (◇) to box (☐) and vice versa.
        </description>
        <description type="short">
            You might have switched up the position of a modal operator (☐,◇) and a negation (¬).
            Notice that ¬☐φ ≡ ◇¬φ and ¬◇φ ≡ ☐¬φ hold.
        </description>
        <transformationType>ML</transformationType>
        <transformationType>ML_CREATE_FORMULA</transformationType>
        <transformationType>ML_MANUAL_TRANSFORMATION</transformationType>
    </group>
</transformationsWithFeedbackTexts>
