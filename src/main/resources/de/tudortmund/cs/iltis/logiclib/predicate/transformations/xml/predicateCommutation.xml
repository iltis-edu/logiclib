<?xml version="1.0" encoding="UTF-8"?>
<transformations>
    <invertible name="COMMUTE_CONJUNCTION" onlyPart="true">
        <match>$X∧$Y</match>
        <replace>$Y∧$X</replace>
        <tests>
            <assertApplicationResult>
                <input>X(x,y) ∧ Y(x,y)</input>
                <expect>Y(x,y) ∧ X(x,y)</expect>
            </assertApplicationResult>
        </tests>
    </invertible>

    <invertible name="COMMUTE_DISJUNCTION" onlyPart="true">
        <match>$X∨$Y</match>
        <replace>$Y∨$X</replace>
        <tests>
            <assertApplicationResult>
                <input>X(x,y) ∨ Y(x,y)</input>
                <expect>Y(x,y) ∨ X(x,y)</expect>
            </assertApplicationResult>
        </tests>
    </invertible>

    <invertible name="COMMUTE_EQUIVALENCE" onlyPart="true">
        <match>$X↔$Y</match>
        <replace>$Y↔$X</replace>
        <tests>
            <assertApplicationResult>
                <input>X(x,y) ↔ Y(x,y)</input>
                <expect>Y(x,y) ↔ X(x,y)</expect>
            </assertApplicationResult>
        </tests>
    </invertible>

    <meta name="COMMUTE">
        <references>
            <reference name="COMMUTE_CONJUNCTION"/>
            <reference name="COMMUTE_DISJUNCTION"/>
            <reference name="COMMUTE_EQUIVALENCE"/>
        </references>
        <tests>
            <assertApplicationResult>
                <input>X(x,y) ∧ Y(x,y)</input>
                <expect>Y(x,y) ∧ X(x,y)</expect>
            </assertApplicationResult>
            <assertApplicationResult>
                <input>X(x,y) ∨ Y(x,y)</input>
                <expect>Y(x,y) ∨ X(x,y)</expect>
            </assertApplicationResult>
            <assertApplicationResult>
                <input>X(x,y) ↔ Y(x,y)</input>
                <expect>Y(x,y) ↔ X(x,y)</expect>
            </assertApplicationResult>
            <assertApplicationResult>
                <input>X(x,y)∧(Y(x,y)∧Z(x,y))</input>
                <expect>(Y(x,y)∧Z(x,y))∧X(x,y)</expect>
            </assertApplicationResult>
            <assertApplicationResult>
                <input>X(x,y)∨(Y(x,y)∨Z(x,y))</input>
                <expect>(Y(x,y)∨Z(x,y))∨X(x,y)</expect>
            </assertApplicationResult>
            <assertApplicationResult>
                <input>(X(x,y) ∨ Z(x,y)) ↔ Y(x,y)</input>
                <expect>Y(x,y) ↔ (X(x,y) ∨ Z(x,y))</expect>
            </assertApplicationResult>
        </tests>
    </meta>
</transformations>